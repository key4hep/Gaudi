<?xml version="1.0" ?>
<!--
    (c) Copyright 1998-2019 CERN for the benefit of the LHCb and ATLAS collaborations

    This software is distributed under the terms of the Apache version 2 licence,
    copied verbatim in the file "LICENSE".

    In applying this licence, CERN does not waive the privileges and immunities
    granted to it by virtue of its status as an Intergovernmental Organization
    or submit itself to any jurisdiction.
-->
<!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="options"><text>
from Configurables import ChronoStatSvc, ApplicationMgr
from Configurables import AuditorSvc, TimingAuditor
from Configurables import GaudiTestSuiteCommonConf
from Gaudi.Configuration import DEBUG

GaudiTestSuiteCommonConf()

logfile = "timing_data.log"

import os
# ensure that we start from a new file
if os.path.exists(logfile):
    os.remove(logfile)

ChronoStatSvc(PerEventFile=logfile, OutputLevel=DEBUG)

auditSvc = AuditorSvc()
auditSvc.Auditors.append(TimingAuditor("TIMER"))

app = ApplicationMgr()
app.TopAlg = ["GaudiTestSuite::TimingAlg/Timing"]
app.EvtSel = "NONE"  # do not use any event input
app.EvtMax = 400
app.ExtSvc.extend(['ToolSvc', auditSvc])
app.AuditAlgorithms = True

</text></argument>
<argument name="validator"><text>
import re
expected = ( r"Timing\s+SUCCESS\s+The timing is \(in us\)\s*\n" +
             r"\|\s*\|\s*#\s*\|\s*Total\s*\|\s*Mean\+-RMS\s*\|\s*Min/Max\s*\|\s*\n" +
             r"\|\s*\(1U\)\s*\|\s*\d*\s*\|(?:[-+.\deE /]+\|){3}\s*\n" +
             r"\|\s*\(2U\)\s*\|\s*\d*\s*\|(?:[-+.\deE /]+\|){3}\s*\n" +
             r"\|\s*\(3U\)\s*\|\s*\d*\s*\|(?:[-+.\deE /]+\|){3}\s*\n" )
if not re.search(expected,stdout):
    causes.append("missing regexp match")
    result["GaudiTest.regexp"] = result.Quote(expected.replace("\\n","\n"))

class Cause(Exception):
    def __init__(self, msg):
        self.msg = msg

try:
    if not os.path.exists('timing_data.log'):
        raise Cause('missing timing log')
    lines = open('timing_data.log').read().splitlines()
    result["timing_data"] = result.Quote('\n'.join(lines))
    if len(lines) != 1:
        raise Cause('timing log content')
    entries = lines[0].split()
    if entries[0] != 'Timing' or len(entries) != 401:
        raise Cause('timing log content')

except Cause as c:
    causes.append(c.msg)

</text></argument>
</extension>
