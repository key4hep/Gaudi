/***********************************************************************************\
* (c) Copyright 1998-2019 CERN for the benefit of the LHCb and ATLAS collaborations *
*                                                                                   *
* This software is distributed under the terms of the Apache version 2 licence,     *
* copied verbatim in the file "LICENSE".                                            *
*                                                                                   *
* In applying this licence, CERN does not waive the privileges and immunities       *
* granted to it by virtue of its status as an Intergovernmental Organization        *
* or submit itself to any jurisdiction.                                             *
\***********************************************************************************/
// ============================================================================
// book the 1D profile histogram (book on demand)
// ============================================================================
template <class PBASE>
AIDA::IProfile1D* GaudiHistos<PBASE>::bookProfile1D( const std::string& title, const HistoBinEdges& edges ) const {
  //
  if ( !produceHistos() ) { return nullptr; } // RETURN
  //
  // exist?
  auto hist = profile1D( title );
  // histogram is already booked
  if ( hist ) { return hist; } // RETURN !!

  // propose the histogram ID
  HistoID ID;
  newHistoID( title, ID );

  // Book the histo and return
  return this->bookProfile1D( ID, title, edges );
}
// ============================================================================
// book the 1D profile histogram with forced ID (book on demand)
// ============================================================================
template <class PBASE>
AIDA::IProfile1D* GaudiHistos<PBASE>::bookProfile1D( const HistoID& ID, const std::string& title,
                                                     const HistoBinEdges& edges ) const {
  //
  if ( !produceHistos() ) { return nullptr; } // RETURN
  //
  // Check ID
  if ( ID.undefined() ) {
    this->Error( "Undefined Histogram ID : Title='" + title + "'" ).ignore();
    return nullptr;
  }

  // exist?
  auto hist = profile1D( ID );
  // histogram is already booked
  if ( hist ) { return hist; } // RETURN !!

  // Histogram title
  const std::string& htitle = ( title.empty() ? "Unnamed 1D Profile Histogram ID=" + ID.idAsString() : title );

  // book the histogram
  if ( ID.numeric() ) {
    hist = this->histoSvc()->bookProf( histoPath(), ID.numericID(), htitle, edges );
  } else if ( ID.literal() ) {
    hist = this->histoSvc()->bookProf( histoPath() + "/" + ID.literalID(), htitle, edges );
  }

  // test ok
  if ( !hist ) {
    this->Error( "IProfile1D* points to NULL! ID='" + ID.idAsString() + "' title='" + htitle + "'" ).ignore();
    return nullptr;
  } // RETURN !!

  // add histogram into histogram storages
  m_profile1DMapID[ID]       = hist;
  m_profile1DMapTitle[title] = hist;

  // Declare to monitoring service
  monitorHisto( Gaudi::Utils::Histos::toBase( hist ), ID );

  // printout and return
  if ( this->msgLevel( MSG::DEBUG ) ) {
    this->debug() << "Booked 1D Profile Histogram : ID='" << ID << "' Path=" << histoPath() << " Title='"
                  << Gaudi::Utils::Histos::htitle( hist ) << "'" << endmsg;
  }
  return hist;
}
// ============================================================================
// fill the 1D profile histogram (book on demand)
// ============================================================================
template <class PBASE>
AIDA::IProfile1D* GaudiHistos<PBASE>::profile1D( const double valueX, const double valueY, const std::string& title,
                                                 const HistoBinEdges& edges, const double weight ) const {
  AIDA::IProfile1D* h( nullptr );
  if ( produceHistos() ) {
    // retrieve or book the histogram
    h = profile1D( title );
    if ( !h ) { h = bookProfile1D( title, edges ); }
    // fill the histogram
    h = fill( h, valueX, valueY, weight, title );
  }
  return h;
}
// ============================================================================
// fill the 1D profile histogram with forced ID assignment (book on demand)
// ============================================================================
template <class PBASE>
AIDA::IProfile1D* GaudiHistos<PBASE>::profile1D( const double valueX, const double valueY, const HistoID& ID,
                                                 const std::string& title, const HistoBinEdges& edges,
                                                 const double weight ) const {
  AIDA::IProfile1D* h( nullptr );
  if ( produceHistos() ) {
    // retrieve or book the histogram
    h = profile1D( ID );
    if ( !h ) { h = bookProfile1D( ID, title, edges ); }
    // fill the histogram
    h = fill( h, valueX, valueY, weight, title );
  }
  return h;
}
// ============================================================================
// The END
// ============================================================================
