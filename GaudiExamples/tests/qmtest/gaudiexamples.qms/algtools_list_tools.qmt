<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="args"><set>
    <text>$GAUDIEXAMPLESROOT/options/AlgTools.py</text>
  </set></argument>
  <argument name="options"><text>
from Configurables import GaudiTesting__ListTools, ApplicationMgr
ApplicationMgr(EvtMax=1).TopAlg.append(GaudiTesting__ListTools('ListTools'))
</text></argument>
  <argument name="use_temp_dir"><enumeral>true</enumeral></argument>
  <argument name="validator"><text>
import re
tools = set(l.strip().split()[-1]
            for l in stdout.splitlines()
            if re.match(r'^ListTools +INFO   \S+', l))

expected = set(['ToolSvc.MyTool',
                'MyAlg.MyTool',
                'ToolSvc.MyGaudiTool',
                'MyAlg.MyGaudiTool',
                'MyAlg.ToolWithName',
                'MyGaudiAlg.LegacyToolHandle',
                'MyGaudiAlg.MyTool',
                'MyGaudiAlg.MyGaudiTool',
                'MyGaudiAlg.ToolWithName',
                'MyGaudiAlg.PrivToolHandle',
                'ToolSvc.TestPubToolHandle',
                'ToolSvc.GenericToolHandle',
                'ToolSvc.ConstGenericToolHandle',
                'ToolSvc.ToolA',
                'ToolSvc.ToolB',
                'ToolSvc.PubToolHandle'])

if tools != expected:
    causes.append('list of tools')
    missing = expected - tools
    extra = tools - expected
    if missing:
        result['missing_tools'] = ('&lt;ul&gt;&lt;li&gt;{0}&lt;/li&gt;&lt;/ul&gt;'
                                   .format('&lt;/li&gt;&lt;li&gt;'.join(sorted(missing))))
    if extra:
        result['extra_tools'] = ('&lt;ul&gt;&lt;li&gt;{0}&lt;/li&gt;&lt;/ul&gt;'
                                 .format('&lt;/li&gt;&lt;li&gt;'.join(sorted(extra))))
</text></argument>
</extension>
