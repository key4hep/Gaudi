<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="args"><set><text>$GAUDIEXAMPLESROOT/options/AlgSequencerCF.py</text></set></argument>
  <argument name="use_temp_dir"><enumeral>true</enumeral></argument>
  <argument name="reference"><text>refs/AlgSequencer_pyopts.ref</text></argument>
  <argument name="validator"><text>
class DropUntil(FilePreprocessor):
    def __init__(self, regexp):
        import re
        self.regexp = re.compile(regexp)
        self._found = False
    def __call__(self, input):
        self._found = False
        return FilePreprocessor.__call__(self, input)
    def __processLine__(self, line):
        self._found = self._found or bool(self.regexp.search(line))
        if self._found:
            return line
        else:
            return None

class TakeUntil(FilePreprocessor):
    def __init__(self, regexp):
        import re
        self.regexp = re.compile(regexp)
        self._found = False
    def __call__(self, input):
        self._found = False
        return FilePreprocessor.__call__(self, input)
    def __processLine__(self, line):
        self._found = self._found or bool(self.regexp.search(line))
        if not self._found:
            return line
        else:
            return None

preprocessor = (normalizeExamples +
                DropUntil('ApplicationMgr       INFO Application Manager Started successfully') +
                TakeUntil('ToolSvc              INFO Removing all tools created by ToolSvc'))
validateWithReference(preproc = preprocessor)
  </text></argument>
</extension>
