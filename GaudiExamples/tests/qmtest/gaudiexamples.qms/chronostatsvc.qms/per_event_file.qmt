<?xml version="1.0" ?>
<!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set><text>Timing.py</text></set></argument>
<argument name="options"><text>
from Configurables import ChronoStatSvc, ApplicationMgr
from Configurables import AuditorSvc, TimingAuditor
from Gaudi.Configuration import DEBUG

logfile = "timing_data.log"

import os
# ensure that we start from a new file
if os.path.exists(logfile):
    os.remove(logfile)

ChronoStatSvc(PerEventFile=logfile, OutputLevel=DEBUG)

auditSvc = AuditorSvc()
auditSvc.Auditors.append(TimingAuditor("TIMER"))

app = ApplicationMgr()
app.ExtSvc.extend(['ToolSvc', auditSvc])
app.AuditAlgorithms = True

</text></argument>
<argument name="validator"><text>
import re
expected = ( r"Timing\s+SUCCESS\s+The timing is \(in us\)\s*\n" +
             r"\|\s*\|\s*#\s*\|\s*Total\s*\|\s*Mean\+-RMS\s*\|\s*Min/Max\s*\|\s*\n" +
             r"\|\s*\(1U\)\s*\|\s*\d*\s*\|(?:[-+.\deE /]+\|){3}\s*\n" +
             r"\|\s*\(2U\)\s*\|\s*\d*\s*\|(?:[-+.\deE /]+\|){3}\s*\n" +
             r"\|\s*\(3U\)\s*\|\s*\d*\s*\|(?:[-+.\deE /]+\|){3}\s*\n" )
if not re.search(expected,stdout):
    causes.append("missing regexp match")
    result["GaudiTest.regexp"] = result.Quote(expected.replace("\\n","\n"))

class Cause:
    def __init__(self, msg):
        self.msg = msg

try:
    if not os.path.exists('timing_data.log'):
        raise Cause('missing timing log')
    lines = open('timing_data.log').read().splitlines()
    result["timing_data"] = result.Quote('\n'.join(lines))
    if len(lines) != 1:
        raise Cause('timing log content')
    entries = lines[0].split()
    if entries[0] != 'Timing' or len(entries) != 401:
        raise Cause('timing log content')

except Cause, c:
    causes.append(c.msg)

</text></argument>
</extension>
