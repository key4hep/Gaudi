stages:
  - build
  - test
  - deploy

image: gitlab-registry.cern.ch/lhcb-core/lbdocker/slc6-build

variables:
  NO_LBLOGIN: "1"
  CLANG_FORMAT_VERSION: "3.9"
  BINARY_TAG: "x86_64-slc6-gcc62-opt"
  LCG_hostos: "x86_64-slc6"
  LCG_release_area: "/cvmfs/sft.cern.ch/lcg/releases"
  BUILDDIR: "build"
  TESTS_REPORT: "test_report"

before_script:
  - export PATH=/cvmfs/sft.cern.ch/lcg/contrib/CMake/3.8.1/Linux-x86_64/bin:/cvmfs/sft.cern.ch/lcg/contrib/ninja/1.7.1/x86_64-slc6:/cvmfs/sft.cern.ch/lcg/releases/Python/2.7.13-597a5/${BINARY_TAG}/bin:${PATH}
  - export PATH=/cvmfs/lhcb.cern.ch/lib/lhcb/LBSCRIPTS/dev/InstallArea/scripts:${PATH}
  - export PYTHONPATH=/cvmfs/lhcb.cern.ch/lib/lhcb/LBSCRIPTS/dev/InstallArea/python:${PYTHONPATH}
  - export CMAKE_PREFIX_PATH=${LCG_release_area}:/cvmfs/projects.cern.ch/intelsw/psxe/linux/x86_64/2017/vtune_amplifier_xe
  - export CCACHE_DIR=${PWD}/.ccache
  - export LD_LIBRARY_PATH=/cvmfs/sft.cern.ch/lcg/external/gcc/6.2.0/x86_64-slc6/lib64:${LD_LIBRARY_PATH}

build:
  tags:
    - cvmfs
  stage: build
  script:
    - curl -o artifacts.zip --location ${CI_PROJECT_URL}/-/jobs/artifacts/v28r2-patches/download?job=${CI_JOB_NAME}
    - unzip -q artifacts.zip '.ccache/*' || true
    - /cvmfs/sft.cern.ch/lcg/releases/ccache/3.3.4-e92e5/${BINARY_TAG}/bin/ccache -z
    - echo 'set(CMAKE_USE_CCACHE ON CACHE BOOL "")' >> cache_preload.cmake
    - echo 'set(clang_format_cmd "'$(which lcg-clang-format-${CLANG_FORMAT_VERSION})'" CACHE FILEPATH "")' >> cache_preload.cmake
    - make BUILDDIR=${BUILDDIR}
    - /cvmfs/sft.cern.ch/lcg/releases/ccache/3.3.4-e92e5/${BINARY_TAG}/bin/ccache -s
  artifacts:
    paths:
      - ${BUILDDIR}
      - .ccache
    expire_in: 1 week

doxygen:
  tags:
    - cvmfs
  stage: test
  script:
    - find build -type f -exec touch -d $(date +@%s) \{} \;
    - make BUILDDIR=${BUILDDIR} doc
    - rm -rf public
    - mkdir -p public/doxygen
    - mv ${BUILDDIR}/doxygen/html ${CI_COMMIT_REF_SLUG}
    - zip -r -q public/doxygen/${CI_COMMIT_REF_SLUG}.zip ${CI_COMMIT_REF_SLUG}
  only:
    - v28r2-patches
    - tags
  artifacts:
    paths:
      - public
    expire_in: 1 day

test:
  tags:
    - cvmfs
  stage: test
  script:
    - find ${BUILDDIR} -type f -exec touch -d $(date +@%s) \{} \;
    - mkdir -p ${BUILDDIR}/html
    - ( make BUILDDIR=${BUILDDIR} test ARGS='-j4' || touch ${BUILDDIR}/html/tests_failed ) | tee ${BUILDDIR}/ctest.log
    - mv ${BUILDDIR}/html ${TESTS_REPORT}
    - mv ${BUILDDIR}/ctest.log ${TESTS_REPORT}
    - mv ${BUILDDIR}/Testing ${TESTS_REPORT}
    - if [ -e ${TESTS_REPORT}/tests_failed ] ; then
    # this prints all lines starting with a white space after and including "The following tests...", excluding lines with "Not Run"
    -   echo "================================================================================"
    -   awk '/^[^[:space:]]/{do_print=0}; /The following tests FAILED:/{do_print=1}; do_print&&!/Not Run/{print}' ${TESTS_REPORT}/ctest.log
    -   echo "================================================================================"
    -   exit 1
    - fi
  artifacts:
    paths:
      - ${TESTS_REPORT}
    when: always
    expire_in: 1 week

# see https://gitlab.cern.ch/gitlabci-examples/deploy_eos for the details
# of the configuration
deploy-doxygen:
  stage: deploy
  only:
    - v28r2-patches
    - tags
  image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
  script:
    - test -z "$EOS_ACCOUNT_USERNAME" -o -z "$EOS_ACCOUNT_PASSWORD" -o -z "$EOS_PATH" && exit 0 || true
    # Script that performs the deploy to EOS. Makes use of the variables defined in the project
    # It will copy the generated content to the folder in EOS
    - deploy-eos
  # do not run any globally defined before_script or after_script for this step
  before_script: []
  after_script: []
