stages:
  - build
  - test
  - check
  - deploy

before_script:
  - export BINARY_TAG=x86_64-centos7-gcc7-opt
  - export LCG_hostos=x86_64-centos7
  - export PATH=/cvmfs/sft.cern.ch/lcg/contrib/CMake/3.8.1/Linux-x86_64/bin:/cvmfs/sft.cern.ch/lcg/contrib/ninja/1.7.1/x86_64-slc6:/cvmfs/sft.cern.ch/lcg/releases/Python/2.7.13-597a5/${BINARY_TAG}/bin:${PATH}
  - export LCG_release_area=/cvmfs/sft.cern.ch/lcg/releases
  - export PATH=/cvmfs/lhcb.cern.ch/lib/lhcb/LBSCRIPTS/dev/InstallArea/scripts:${PATH}
  - export CMAKE_PREFIX_PATH=/cvmfs/sft.cern.ch/lcg/releases:/cvmfs/projects.cern.ch/intelsw/psxe/linux/x86_64/2017/vtune_amplifier_xe
  - export CCACHE_DIR=${PWD}/.ccache

build:
  image: lhcbdev/centos7-build:latest
  tags:
    - cvmfs
  stage: build
  script:
    - curl -o artifacts.zip --location ${CI_PROJECT_URL}/builds/artifacts/master/download?job=build
    - unzip -q artifacts.zip '.ccache/*' || true
    - /cvmfs/sft.cern.ch/lcg/releases/ccache/3.3.4-e92e5/${BINARY_TAG}/bin/ccache -z
    - echo 'set(CMAKE_USE_CCACHE ON CACHE BOOL "")' >> cache_preload.cmake
    - echo 'set(clang_format_cmd "'$(which lcg-clang-format-3.9)'" CACHE FILEPATH "")' >> cache_preload.cmake
    - make BUILDDIR=build
    - /cvmfs/sft.cern.ch/lcg/releases/ccache/3.3.4-e92e5/${BINARY_TAG}/bin/ccache -s
  artifacts:
    paths:
      - build
      - .ccache
    expire_in: 1 week

coding-conventions:
  image: lhcbdev/centos7-build:latest
  tags:
    - cvmfs
  stage: test
  script:
    - export LCG_release_area=${LCG_release_area}:/cvmfs/lhcb.cern.ch/lib/lcg/external
    - pip install autopep8
    - make BUILDDIR=build apply-formatting
    - git diff > apply-formatting.patch
    - git diff --stat | tee apply-formatting.stat
  artifacts:
    paths:
      - apply-formatting.patch
      - apply-formatting.stat
    expire_in: 1 day

doxygen:
  image: lhcbdev/centos7-build:latest
  tags:
    - cvmfs
  stage: test
  script:
    - find build -type f -exec touch -d $(date +@%s) \{} \;
    - make BUILDDIR=build doc
    - rm -rf public
    - mkdir -p public/doxygen
    - mv build/doxygen/html ${CI_COMMIT_REF_SLUG}
    - zip -r -q public/doxygen/${CI_COMMIT_REF_SLUG}.zip ${CI_COMMIT_REF_SLUG}
  only:
    - master
    - tags
  artifacts:
    paths:
      - public
    expire_in: 1 day

test:
  image: lhcbdev/centos7-build:latest
  tags:
    - cvmfs
  stage: test
  script:
    - find build -type f -exec touch -d $(date +@%s) \{} \;
    - mkdir -p build/html
    - ( make BUILDDIR=build test ARGS='-j4' || touch build/html/tests_failed ) | tee build/ctest.log
    - mv build/html test_report
    - mv build/ctest.log test_report
  artifacts:
    paths:
      - test_report
    expire_in: 1 week

test_report:
  stage: check
  script:
    - status=0
    - echo "=== code formatting report ==="
    - if [ $(wc -c apply-formatting.stat | cut -d' ' -f1) != 0 ] ; then
    -   cat apply-formatting.stat
    -   status=1
    - else
    -   echo formatting OK
    - fi
    - echo "=== tests report ==="
    - if [ -e test_report/tests_failed ] ; then
    # this prints all lines starting with a white space after and including "The following tests...", excluding lines with "Not Run"
    -   awk '/^[^[:space:]]/{do_print=0}; /The following tests FAILED:/{do_print=1}; do_print&&!/Not Run/{print}' test_report/ctest.log
    -   status=1
    - else
    -   echo tests successful
    - fi
    - exit $status

# see https://gitlab.cern.ch/gitlabci-examples/deploy_eos for the details
# of the configuration
deploy-doxygen:
  stage: deploy
  only:
    - master
    - tags
  image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
  script:
    - test -z "$EOS_ACCOUNT_USERNAME" -o -z "$EOS_ACCOUNT_PASSWORD" -o -z "$EOS_PATH" && exit 0 || true
    # Script that performs the deploy to EOS. Makes use of the variables defined in the project
    # It will copy the generated content to the folder in EOS
    - deploy-eos
  # do not run any globally defined before_script or after_script for this step
  before_script: []
  after_script: []
