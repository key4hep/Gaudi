<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
    (c) Copyright 1998-2019 CERN for the benefit of the LHCb and ATLAS collaborations

    This software is distributed under the terms of the Apache version 2 licence,
    copied verbatim in the file "LICENSE".

    In applying this licence, CERN does not waive the privileges and immunities
    granted to it by virtue of its status as an Intergovernmental Organization
    or submit itself to any jurisdiction.
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set>
  <text>-v</text>
  <text>../../options/ROOT_IO/Read.py</text>
</set></argument>
<argument name="options"><text>
from Gaudi.Configuration import *

# produce a currupted (truncated) copy of the output of ROOT_IO/Write.py
import shutil
shutil.copy('ROOTIO.dst', 'ROOTIO_corrupted.dst')

# find a specific byte sequence to determine where to corrupt the file
magic_bytes = b"_Event_Collision_0_MyVertices."
with open('ROOTIO_corrupted.dst', 'rb') as f:
    data = f.read()
    if data.count(magic_bytes) != 1:
        raise NotImplementedError("The test file is not as expected")
    seek_index = data.index(magic_bytes) + 735

with open('ROOTIO_corrupted.dst', 'rb+') as f:
    f.seek(seek_index)
    f.write(b'corruption!')

esel = EventSelector()
esel.Input = ["DATAFILE='PFN:ROOTIO_corrupted.dst' SVC='Gaudi::RootEvtSelector' OPT='READ'"]
</text></argument>
<argument name="prerequisites"><set>
  <tuple><text>gauditestsuite.root_io.write</text><enumeral>PASS</enumeral></tuple>
</set></argument>
<argument name="use_temp_dir"><enumeral>true</enumeral></argument>
<argument name="exit_code"><integer>16</integer></argument>
<argument name="validator"><text>
findReferenceBlock("ApplicationMgr      ERROR Application Manager Terminated with error code 16")
</text></argument>
</extension>
