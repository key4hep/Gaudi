#!/bin/bash -e

if [ -n "${CI}" ] ; then
  job_id="${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}"
else
  job_id="standalone job"
fi

# make sure we have the right versions of the commands
YAPF_VERSION=$(sed -E -n 's/ *set\(YAPF_VERSION *"([0-9.]*)".*/\1/p' cmake/GaudiProjectConfig.cmake)
if [ "$(yapf --version)" != "yapf $YAPF_VERSION" ] ; then
  echo "invalid version of yapf: $(yapf --version) ($YAPF_VERSION required)"
  exit 1
fi

CLANG_FORMAT_VERSION=$(sed -E -n 's/ *set\(CLANG_FORMAT_VERSION *"([0-9.]*)".*/\1/p' cmake/GaudiProjectConfig.cmake)
if ! which clang-format-$CLANG_FORMAT_VERSION >/dev/null ; then
  echo "clang-format-$CLANG_FORMAT_VERSION command not available"
  exit 1
fi

if [ -n "${TARGET_BRANCH:=$1}" ] ; then
  git fetch https://gitlab.cern.ch/gaudi/Gaudi.git ${TARGET_BRANCH}
  files_to_check() {
    git diff --name-only --no-renames --diff-filter MA FETCH_HEAD...HEAD
  }
else
  files_to_check() {
    git ls-files
  }
fi

files_to_check | \
  grep -E '\.(i?[ch](pp|xx|c)?|cc|hh)$' | xargs --no-run-if-empty --max-procs=$(nproc) --max-args=100 clang-format-$CLANG_FORMAT_VERSION -i --style=file || true
files_to_check | \
  grep -E '\.py$' | xargs --no-run-if-empty --max-procs=$(nproc) --max-args=100 yapf -i || true

if git diff --exit-code --quiet ; then
  echo "no change"
else
  echo "From: Gitlab CI <noreply@cern.ch>" > apply-formatting.patch
  echo "Date: $(date -R)" >> apply-formatting.patch
  echo "Subject: [PATCH] Fixed formatting" >> apply-formatting.patch
  echo "" >> apply-formatting.patch
  echo "patch generated by ${job_id}" >> apply-formatting.patch
  echo "" >> apply-formatting.patch
  echo "" >> apply-formatting.patch
  git diff >> apply-formatting.patch
  if [ -n "${CI}" ] ; then
    cat <<EOF
=======================================
 You can fix formatting with:

   curl ${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/raw/apply-formatting.patch | git am

=======================================
EOF
  else
    echo "Changes made to files and recorded as 'apply-formatting.patch'."
    echo "You can commit them with:"
    echo "  git commit -a -m 'Fixed formatting'"
    echo "or discard all non staged changes with:"
    echo "  git checkout ."
  fi
  exit 1
fi
